from rest_framework import serializers
from .models import Influencer, Post


class InfluencerSerializer(serializers.ModelSerializer):
    """Serializer for Influencer model"""
    engagement_rate = serializers.ReadOnlyField()
    total_posts = serializers.SerializerMethodField()
    total_revenue = serializers.SerializerMethodField()
    
    class Meta:
        model = Influencer
        fields = [
            'id', 'name', 'category', 'gender', 'follower_count', 
            'platform', 'engagement_rate', 'total_posts', 'total_revenue',
            'created_at', 'updated_at'
        ]
        read_only_fields = ['id', 'created_at', 'updated_at']
    
    def get_total_posts(self, obj):
        """Get total number of posts for this influencer"""
        return obj.posts.count()
    
    def get_total_revenue(self, obj):
        """Get total revenue generated by this influencer"""
        from tracking.models import TrackingData
        tracking_data = TrackingData.objects.filter(influencer=obj)
        return sum(td.revenue for td in tracking_data)


class PostSerializer(serializers.ModelSerializer):
    """Serializer for Post model"""
    influencer_name = serializers.CharField(source='influencer.name', read_only=True)
    engagement_rate = serializers.ReadOnlyField()
    
    class Meta:
        model = Post
        fields = [
            'id', 'influencer', 'influencer_name', 'platform', 'date', 
            'url', 'caption', 'reach', 'likes', 'comments', 
            'engagement_rate', 'created_at', 'updated_at'
        ]
        read_only_fields = ['id', 'created_at', 'updated_at']


class InfluencerDetailSerializer(InfluencerSerializer):
    """Detailed serializer for Influencer with related posts"""
    posts = PostSerializer(many=True, read_only=True)
    
    class Meta(InfluencerSerializer.Meta):
        fields = InfluencerSerializer.Meta.fields + ['posts'] 